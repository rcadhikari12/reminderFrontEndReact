{"version":3,"sources":["components/SetReminder.js","components/ReminderList.js","components/Logout.js","components/Home.js","components/DeleteReminder.js","components/RemainderDetails.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["SetReminder","state","email","eventName","eventReminderDate","eventReminderTime","errMsg","handleSubject","event","setState","target","value","handleDate","handleTime","handleSubmit","preventDefault","axios","post","window","location","reload","document","user","JSON","parse","localStorage","getItem","this","subject","date","time","type","class","data-toggle","data-target","id","tabindex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","rows","cols","onChange","className","onClick","Component","ReminderList","reminders","fetch","then","response","json","data","length","map","reminder","key","eventId","to","pathname","Logout","handleLogout","removeItem","clientId","buttonText","onLogoutSuccess","icon","Home","getUser","src","alt","Date","toString","slice","DeleteReminder","redirect","handleClick","delete","props","reminderId","alert","RemainderDetails","history","push","Login","responseGoogle","name","profileObj","imageUrl","setItem","stringify","onSuccess","onFailure","cookiePolicy","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ed1c9d2b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass SetReminder extends Component {\r\n  state = {\r\n    email: \"\",\r\n    eventName: \"\",\r\n    eventReminderDate: \"\",\r\n    eventReminderTime: \"\",\r\n    errMsg: false,\r\n  };\r\n\r\n  handleSubject = (event) => {\r\n    this.setState({ eventName: event.target.value });\r\n  };\r\n\r\n  handleDate = (event) => {\r\n    this.setState({ eventReminderDate: event.target.value });\r\n  };\r\n\r\n  handleTime = (event) => {\r\n    this.setState({ eventReminderTime: event.target.value });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (\r\n      this.state.eventName === \"\" ||\r\n      this.state.eventReminderDate === \"\" ||\r\n      this.state.eventReminderTime === \"\"\r\n    ) {\r\n      this.setState({ errMsg: true });\r\n    } else {\r\n      axios.post(`http://localhost:8080/createReminder/${this.state.email}`, {\r\n        eventName: this.state.eventName,\r\n        eventReminderDate: this.state.eventReminderDate,\r\n        eventReminderTime: this.state.eventReminderTime,\r\n      });\r\n\r\n      window.location.reload(false);\r\n      document.location.reload();\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    this.setState({ email: user[1] });\r\n  }\r\n\r\n  render() {\r\n    const { subject, date, time, errMsg } = this.state;\r\n    return (\r\n      <div>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-warning btn-sm\"\r\n          data-toggle=\"modal\"\r\n          data-target=\"#exampleModal\"\r\n        >\r\n          Add New Reminder\r\n        </button>\r\n\r\n        <div\r\n          class=\"modal fade\"\r\n          id=\"exampleModal\"\r\n          tabindex=\"-1\"\r\n          role=\"dialog\"\r\n          aria-labelledby=\"exampleModalLabel\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          <div class=\"modal-dialog\">\r\n            <div class=\"modal-content\">\r\n              <div class=\"modal-header bg-info text-white\">\r\n                <h5 class=\"modal-title \" id=\"exampleModalLabel\">\r\n                  Remind me of the event...\r\n                </h5>\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"close\"\r\n                  data-dismiss=\"modal\"\r\n                  aria-label=\"Close\"\r\n                >\r\n                  <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n              </div>\r\n              <div class=\"modal-body\">\r\n                <label>Event description</label>\r\n                <br />\r\n                <textarea\r\n                  rows=\"2\"\r\n                  cols=\"40\"\r\n                  value={subject}\r\n                  onChange={this.handleSubject}\r\n                />\r\n                <br />\r\n                <br />\r\n\r\n                <label>Reminder Date </label>\r\n                <br />\r\n\r\n                <input type=\"date\" value={date} onChange={this.handleDate} />\r\n\r\n                <br />\r\n                <br />\r\n\r\n                <label>Reminder Time </label>\r\n                <br />\r\n\r\n                <input type=\"time\" value={time} onChange={this.handleTime} />\r\n\r\n                {errMsg ? (\r\n                  <p className=\"text-danger\">One or more Empty fields... </p>\r\n                ) : null}\r\n              </div>\r\n\r\n              <div class=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"btn btn-secondary\"\r\n                  data-dismiss=\"modal\"\r\n                >\r\n                  Close\r\n                </button>\r\n                <input\r\n                  className=\"btn btn-success\"\r\n                  type=\"submit\"\r\n                  value=\"Submit\"\r\n                  onClick={this.handleSubmit}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SetReminder;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ReminderList extends Component {\r\n  state = {\r\n    reminders: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    const email = user[1];\r\n\r\n    fetch(`http://localhost:8080/getRemindersByEmailId/${email}`)\r\n      .then((response) => response.json())\r\n      .then((data) => this.setState({ reminders: data }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.reminders.length === 0 ? (\r\n          <h4 className=\"text-center mt-5  text-success\">No reminders..</h4>\r\n        ) : null}\r\n\r\n        {this.state.reminders.map((reminder) => {\r\n          return (\r\n            <div key={reminder.eventId} className=\"m-5 \">\r\n              <Link\r\n                to={{\r\n                  pathname: \"/reminder-details\",\r\n                  state: { reminder },\r\n                }}\r\n              >\r\n                <h6 className=\"text-dark\"> {reminder.eventName}</h6>\r\n              </Link>\r\n\r\n              <hr />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReminderList;\r\n","import React, { Component } from \"react\";\r\nimport { GoogleLogout } from \"react-google-login\";\r\n\r\nclass Logout extends Component {\r\n  state = {};\r\n\r\n  handleLogout = () => {\r\n    localStorage.removeItem(\"user\");\r\n    document.location.reload();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <GoogleLogout\r\n          clientId=\"262137225765-cakq2g81i7m40skr6ua6n43v2jqj2onp.apps.googleusercontent.com\"\r\n          buttonText=\"Logout\"\r\n          onLogoutSuccess={this.handleLogout}\r\n          icon={false}\r\n        ></GoogleLogout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Logout;\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport SetReminder from \"../components/SetReminder\";\r\nimport ReminderList from \"../components/ReminderList\";\r\nimport Logout from \"./Logout\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    user: [],\r\n  };\r\n\r\n  getUser = () => {\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    this.setState({ user });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getUser();\r\n  }\r\n\r\n  render() {\r\n    if (!localStorage.getItem(\"user\")) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"jumbotron bg-info text-white\">\r\n          <h1 class=\"display-6 text-center \">Remind Me</h1>\r\n          <div className=\"float-right\">\r\n            {\" \"}\r\n            <Logout />\r\n          </div>\r\n          <img src={this.state.user[2]} alt=\" user profile \" />\r\n          <p>{this.state.user[0]}</p>\r\n        </div>\r\n        <br />\r\n        <center>\r\n          <h2 className=\"text-primary\">{new Date().toString().slice(0, 15)}</h2>\r\n        </center>\r\n\r\n        <br />\r\n        <div className=\"reminder-buttton\">\r\n          <SetReminder />\r\n        </div>\r\n\r\n        <h1 className=\"m-5\">Events</h1>\r\n\r\n        <ReminderList />\r\n\r\n        <div className=\"footer\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass DeleteReminder extends Component {\r\n  state = {\r\n    redirect: false,\r\n  };\r\n\r\n  handleClick = () => {\r\n    axios.delete(\r\n      `http://localhost:8080/deleteReminder/${this.props.reminderId}`,\r\n      {}\r\n    );\r\n    window.alert(\"Reminder deleted successfully...\");\r\n    this.setState({ redirect: !this.state.redirect });\r\n  };\r\n  render() {\r\n    if (this.state.redirect) {\r\n      this.setState({ redirect: false });\r\n      return <Redirect to=\"/home\" />;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Delete Reminder\"\r\n          onClick={this.handleClick}\r\n          className=\"btn btn-danger\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeleteReminder;\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport DeleteReminder from \"./DeleteReminder\";\r\n\r\nclass RemainderDetails extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    const { reminder } = this.props.location.state;\r\n\r\n    if (!localStorage.getItem(\"user\")) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"reminder-details \">\r\n        <div>\r\n          <h2 className=\"jumbotron mt-5 text-center bg-info text-white\">\r\n            Reminder Details\r\n            <input\r\n              type=\"submit\"\r\n              value=\"Go Back\"\r\n              className=\"btn btn-success float-right\"\r\n              onClick={() => this.props.history.push(\"/home\")}\r\n            />\r\n          </h2>\r\n        </div>\r\n        <div className=\"box-details bg-info text-white\">\r\n          <hr />\r\n          <h3 className=\"bg-dark text\">{reminder.eventName}</h3>\r\n          <br />\r\n\r\n          <h6>Reminder Date: {reminder.eventReminderDate}</h6>\r\n          <br />\r\n          <h6>Reminder Time: {reminder.eventReminderTime}</h6>\r\n\r\n          <br />\r\n          <DeleteReminder reminderId={reminder.reminderId} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RemainderDetails;\r\n","import React, { Component } from \"react\";\r\nimport GoogleLogin from \"react-google-login\";\r\nimport axios from \"axios\";\r\n\r\nclass Login extends Component {\r\n  state = {};\r\n\r\n  responseGoogle = (response) => {\r\n    this.props.history.push(\"/home\");\r\n\r\n    let user = [];\r\n    const name = response.profileObj.name;\r\n    const email = response.profileObj.email;\r\n    const imageUrl = response.profileObj.imageUrl;\r\n\r\n    if (!JSON.parse(localStorage.getItem(\"user\"))) {\r\n      user.push(name, email, imageUrl);\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n    }\r\n\r\n    axios.post(`http://localhost:8080/register`, {\r\n      email: email,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"login-form\">\r\n        '<h2>Reminder App Login</h2>\r\n        <br />\r\n        <div className=\"google-button\">\r\n          <GoogleLogin\r\n            clientId=\"262137225765-cakq2g81i7m40skr6ua6n43v2jqj2onp.apps.googleusercontent.com\"\r\n            buttonText=\"Login with Google\"\r\n            onSuccess={this.responseGoogle}\r\n            onFailure={this.responseGoogle}\r\n            cookiePolicy={\"single_host_origin\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport RemainderDetails from \"./components/RemainderDetails\";\nimport Login from \"./components/Login\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Route path=\"/\" exact component={Login} />\n        <Route path=\"/home\" exact component={Home} />\n        <Route path=\"/reminder-details\" component={RemainderDetails} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}